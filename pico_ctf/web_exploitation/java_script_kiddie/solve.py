import itertools, io
from PIL import Image
enc = [ 29, 36, 29, 222, 0, 140, 176, 248, 245, 216, 254, 130, 215, 206, 147, 130, 137, 180, 70, 21, 13, 49, 104, 252, 102, 56, 254, 236, 61, 252, 127, 82, 0, 157, 89, 71, 0, 253, 91, 132, 152, 253, 78, 254, 236, 176, 61, 108, 164, 101, 119, 114, 135, 211, 216, 152, 219, 174, 0, 56, 64, 204, 116, 219, 48, 80, 26, 2, 148, 228, 239, 119, 236, 241, 0, 232, 36, 127, 93, 35, 21, 0, 78, 223, 32, 56, 56, 0, 68, 255, 156, 15, 36, 188, 157, 90, 74, 0, 1, 110, 226, 231, 191, 10, 126, 251, 32, 68, 144, 250, 249, 49, 156, 16, 0, 8, 241, 0, 157, 114, 73, 119, 1, 13, 60, 66, 194, 188, 243, 61, 69, 54, 63, 10, 0, 65, 0, 69, 108, 0, 174, 72, 96, 237, 60, 218, 82, 255, 29, 0, 26, 148, 1, 0, 131, 237, 73, 192, 68, 9, 32, 225, 38, 231, 121, 73, 1, 55, 84, 0, 139, 71, 0, 65, 95, 248, 185, 206, 144, 195, 233, 2, 68, 48, 0, 120, 250, 40, 155, 111, 110, 251, 213, 183, 59, 120, 163, 30, 186, 63, 160, 31, 251, 233, 145, 46, 144, 215, 227, 200, 119, 191, 118, 40, 197, 116, 179, 150, 205, 243, 252, 62, 72, 159, 30, 101, 202, 242, 183, 145, 22, 127, 62, 48, 250, 17, 45, 59, 240, 207, 82, 239, 232, 199, 144, 222, 136, 33, 152, 132, 244, 56, 206, 43, 239, 10, 216, 252, 252, 35, 141, 245, 106, 98, 43, 13, 127, 232, 173, 0, 175, 231, 111, 231, 215, 146, 215, 64, 56, 91, 3, 190, 81, 181, 78, 254, 243, 123, 63, 137, 63, 127, 150, 208, 204, 164, 64, 96, 148, 4, 113, 75, 107, 103, 160, 248, 183, 223, 48, 123, 196, 5, 144, 40, 0, 207, 89, 28, 231, 154, 160, 203, 116, 19, 52, 158, 245, 239, 75, 49, 125, 187, 241, 234, 246, 191, 41, 61, 23, 53, 155, 252, 205, 141, 204, 7, 157, 253, 173, 186, 126, 191, 217, 151, 206, 97, 46, 123, 237, 100, 252, 37, 238, 74, 154, 165, 243, 140, 126, 56, 24, 125, 30, 233, 211, 196, 233, 219, 163, 244, 141, 155, 125, 85, 169, 72, 184, 143, 132, 12, 132, 116, 20, 4, 241, 56, 188, 86, 30, 146, 50, 255, 74, 0, 229, 71, 21, 73, 168, 135, 185, 127, 207, 208, 19, 54, 249, 233, 26, 72, 127, 74, 146, 10, 111, 188, 52, 239, 38, 36, 212, 44, 238, 191, 180, 91, 211, 65, 210, 204, 175, 250, 61, 201, 39, 248, 73, 209, 221, 140, 74, 227, 157, 201, 249, 203, 130, 26, 71, 225, 193, 61, 150, 228, 245, 75, 202, 254, 245, 149, 99, 237, 167, 62, 49, 151, 253, 12, 42, 13, 57, 134, 159, 124, 72, 231, 88, 60, 183, 108, 220, 254, 185, 181, 57, 178, 215, 233, 108, 116, 205, 205, 111, 18, 249, 245, 70, 36, 52, 95, 129, 3, 234, 247, 119, 242, 128, 99, 234, 28, 200, 123, 80, 228, 218, 233, 73, 234, 26, 124, 184, 247, 191, 5, 245, 103, 187, 253, 210, 65, 191, 245, 175, 38, 235, 223, 127, 187, 135, 79, 181, 5, 50, 191, 188, 186, 183, 218, 119, 128, 185, 55, 131, 191, 175, 88, 193, 111, 202, 241, 157, 166, 28, 117, 241, 33, 136, 173, 247, 124, 110, 183, 251, 54, 150, 50, 161, 76, 230, 90, 187, 204, 86, 202, 28, 23, 90, 126, 156, 223, 43, 129, 243, 49, 24, 90, 162, 17, 31, 219, 185, 82, 117, 223, 227, 209, 209, 194, 99, 101, 86, 235, 107, 122, 156, 248, 152, 251, 215, 252, 190, 251, 220, 101, 120, 86, 245, 85, 204, 140, 151, 102, 80, 255, 123, 71, 213, 127, 203, 54, 30, 30, 96, 111, 87, 134, 249, 135, 25, 172, 213, 228, 227, 248, 147, 104, 151, 171, 155, 217, 148, 95, 1, 255, 32, 45, 29, 250, 215, 102, 135, 196, 250, 243, 29, 237, 25, 255, 187, 235, 20, 85, 121, 226, 157, 151, 253, 47, 95, 87, 4, 251, 124, 90 ]
key = []
png = [0x89 ,0x50 ,0x4e ,0x47 ,0x0d ,0x0a ,0x1a ,0x0a ,0x00 ,0x00 ,0x00 ,0x0d ,0x49 ,0x48 ,0x44 ,0x52]

for i in range (0, 16):
    #print ('i: ' + str (i) + '(', end = '')
    key.append (list ())
    for k in range (0, 127 - 48):
        #(((j + shifter) * LEN) % bytes.length) + i
        pos = ((k * 16) % len (enc)) + i
        if enc [pos] == png [i]:
            key [i].append (chr(k + 48))
            #print (chr(k + 48), end = '')
    #print (')')
#print ()

def perm (pos, stng):
    if pos >= 16:
        # check if valid png
        # create the png as the javascript algorithm do
        result = [None] * 704
        for i in range (0, 16):
            shifter = ord (stng [i]) - 48
            for j in range (0, 44):
                x = enc [(((j + shifter) * 16) % len (enc)) + i]
                result [(j * 16) + i] = x
        img = Image.open (io.BytesIO (bytes (result)))
        print ('Valid key: ' + stng)
        return
    for i in range (0, len (key [pos])):
        perm (pos + 1, stng + key [pos][i])
perm (0, '')
