import itertools, io
from PIL import Image
enc = [ 160, 78, 78, 121, 229, 127, 238, 169, 217, 206, 77, 0, 0, 9, 174, 215, 96, 83, 1, 223, 206, 59, 72, 65, 243, 0, 31, 13, 73, 68, 110, 127, 137, 130, 0, 63, 116, 220, 251, 154, 0, 0, 73, 0, 0, 0, 174, 78, 0, 80, 70, 199, 0, 0, 241, 63, 0, 0, 0, 237, 154, 72, 0, 63, 164, 0, 144, 243, 13, 10, 191, 188, 0, 0, 0, 40, 210, 192, 68, 127, 64, 0, 102, 38, 0, 0, 179, 0, 1, 120, 0, 47, 139, 77, 95, 66, 41, 16, 222, 0, 137, 73, 239, 0, 84, 3, 156, 111, 241, 205, 138, 0, 144, 55, 141, 71, 69, 2, 0, 10, 144, 67, 248, 157, 119, 238, 194, 82, 93, 73, 162, 114, 226, 3, 0, 114, 75, 108, 139, 118, 6, 65, 150, 108, 157, 38, 141, 2, 198, 35, 26, 65, 133, 121, 217, 54, 45, 222, 81, 219, 175, 127, 179, 95, 198, 47, 1, 219, 193, 207, 231, 99, 62, 235, 121, 28, 77, 127, 214, 142, 114, 90, 68, 212, 24, 210, 96, 30, 231, 0, 99, 229, 108, 3, 129, 136, 231, 55, 47, 234, 73, 113, 68, 91, 222, 46, 26, 191, 166, 249, 56, 115, 73, 143, 4, 194, 235, 125, 126, 227, 107, 63, 30, 231, 119, 70, 191, 183, 158, 178, 133, 7, 172, 113, 182, 195, 122, 250, 134, 253, 34, 109, 151, 30, 9, 210, 239, 59, 235, 249, 126, 111, 215, 224, 216, 152, 253, 136, 155, 36, 51, 13, 172, 71, 199, 235, 127, 223, 187, 4, 13, 202, 128, 206, 245, 187, 198, 75, 230, 205, 36, 52, 190, 126, 91, 22, 178, 151, 140, 57, 159, 67, 31, 205, 252, 39, 204, 124, 178, 157, 36, 135, 186, 66, 116, 151, 59, 112, 207, 213, 85, 172, 70, 233, 246, 183, 26, 158, 10, 2, 239, 74, 152, 155, 56, 91, 253, 224, 231, 236, 113, 55, 241, 13, 220, 55, 204, 252, 202, 137, 176, 126, 159, 20, 164, 4, 201, 15, 69, 207, 123, 9, 33, 37, 57, 207, 245, 223, 194, 252, 194, 223, 48, 129, 48, 227, 63, 18, 59, 182, 146, 137, 151, 197, 172, 236, 166, 130, 249, 243, 201, 244, 37, 252, 220, 255, 51, 135, 169, 228, 227, 16, 78, 96, 104, 129, 249, 160, 78, 211, 55, 234, 87, 79, 30, 90, 113, 6, 9, 124, 54, 103, 122, 110, 62, 16, 67, 53, 215, 143, 156, 223, 213, 247, 62, 243, 204, 239, 101, 78, 106, 161, 55, 29, 14, 217, 114, 17, 120, 209, 215, 3, 239, 144, 114, 174, 9, 245, 9, 226, 151, 41, 151, 155, 137, 162, 73, 143, 165, 146, 94, 126, 30, 194, 73, 226, 22, 122, 149, 70, 223, 231, 238, 198, 186, 125, 181, 4, 5, 68, 108, 82, 107, 148, 233, 113, 26, 253, 190, 249, 231, 233, 127, 204, 46, 235, 208, 215, 242, 143, 43, 208, 150, 60, 145, 242, 120, 223, 249, 230, 76, 231, 40, 144, 111, 245, 82, 194, 157, 82, 227, 76, 172, 187, 228, 115, 223, 52, 63, 94, 135, 103, 174, 78, 65, 91, 123, 246, 126, 250, 114, 215, 213, 55, 126, 90, 111, 210, 52, 131, 107, 243, 59, 36, 170, 61, 36, 254, 206, 67, 71, 177, 121, 132, 144, 29, 126, 231, 33, 186, 106, 245, 59, 251, 123, 98, 44, 143, 106, 239, 165, 74, 227, 254, 204, 231, 181, 253, 216, 127, 30, 76, 190, 93, 235, 125, 165, 85, 235, 23, 59, 242, 246, 227, 243, 255, 223, 186, 127, 63, 127, 239, 64, 108, 237, 161, 49, 121, 94, 42, 15, 99, 23, 60, 155, 196, 167, 173, 227, 165, 88, 126, 227, 78, 246, 52, 178, 255, 242, 141, 245, 213, 191, 149, 92, 18, 54, 234, 153, 92, 201, 19, 148, 160, 194, 159, 175, 105, 147, 72, 73, 67, 164, 99, 229, 52, 119, 106, 174, 238, 223, 254, 51, 118, 191, 63, 175, 87, 107, 198, 101, 215, 16, 112, 66, 170, 90, 75, 216, 3, 142, 244, 249, 183, 203, 84, 42, 0, 128, 145, 255, 77, 42, 135, 239, 231, 0, 36, 58, 42, 54, 232, 111, 44, 141, 69, 78, 60, 171, 249 ]
key = []
png = [0x89 ,0x50 ,0x4e ,0x47 ,0x0d ,0x0a ,0x1a ,0x0a ,0x00 ,0x00 ,0x00 ,0x0d ,0x49 ,0x48 ,0x44 ,0x52]

for i in range (0, 16):
    # all ascii writable characters
    key.append ([])
    for k in range (0, 10):
        # [0 .. 30, 2]
        # this convert any number to int {'0' => 0}
        #shifter = Number(key.slice((i*2),(i*2)+1));
        #bytes[(((j + shifter) * LEN) % bytes.length) + i]
        pos = (((k) * 16) % len (enc)) + i
        if png [i] == enc [pos]:
            key [i].append (chr (k + 48))

def perm (pos, stng):
    if pos >= 16:
        # check if valid png
        # create the png as the javascript algorithm do
        result = [None] * 704
        for i in range (0, 16):
            shifter = ord (stng [i]) - 48
            for j in range (0, 44):
                x = enc [(((j + shifter) * 16) % len (enc)) + i]
                result [(j * 16) + i] = x
        try:
            img = Image.open (io.BytesIO (bytes (result)))
            print ('Valid key: ' + (' '.join (stng)).replace (' ', '0') + '0')
        except:
            return
        return
    for i in range (0, len (key [pos])):
        perm (pos + 1, stng + key [pos][i])
perm (0, '')
